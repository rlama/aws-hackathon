/*
  Dropdown

  March 1, 2018
  ask sorenfrederiksen@fairfaxmedia.com.au

  A couple of mix-ins to help users implement standard dropdowns as quickly as possible.

  All mix-ins result in inputs that can signify the input is deactivated (apply the 
  '.is--deactivated' class).

  To use dropdown inputs, add this to the top of your HTML document (or add the symbol elements to 
  an existing svg container):

  ```
  <svg xmlns="http://www.w3.org/2000/svg" style="position:absolute; width: 0; height: 0;">
    <symbol viewBox="0 0 10 7" id="icon-carat">
      <path d="M1 1l4 3.74L9 1" stroke="currentColor" stroke-width="2" fill="none" fill-rule="evenodd"/>
    </symbol>
    <symbol viewBox="0 0 9 9" id="icon-tick">
      <path d="M2.978 9a.998.998 0 0 1-.706-.294L.292 6.728a1 1 0 0 1 1.415-1.414L2.853 6.46 7.188.416a1 1 0 0 1 1.625 1.166l-5.022 7A.994.994 0 0 1 2.978 9" fill="currentColor" fill-rule="evenodd"/>
    </symbol>
    <symbol viewBox="0 0 16 16" id="icon-validation-alert">
      <circle r="8" cx="8" cy="8" fill="currentColor"></circle>
      <text 
        text-anchor="middle" 
        x="8" 
        y="13" 
        fill="#fff" 
        style="font-size: 13px; font-weight: 700; font-family: 'PT Sans', sans-serif">!</text>
    </symbol>
  </svg>
  ```
  
  You can use this style as follows.

  Example SCSS:
  ```
  .yourDropdownClass {
    @include dropdown("standard", false, true);
  }
  ```
  Example HTML:
  ```
    <div class="yourDropdownClass">
      <label>Some input label</label>
      <div class="dropdown__inner" id="dropdown-container">
        <span class="dropdown__inner__current-value" id="dropdown-current-value">Soren Frederiksen</span>
        <svg 
          viewBox="0 0 10 7" version="1.1" 
          xmlns="http://www.w3.org/2000/svg"
          class="dropdown__inner__carat">
          <use 
            xmlns:xlink="http://www.w3.org/1999/xlink" 
            xlink:href="#icon-carat" 
            class="dropdown__inner__carat__image">
        </svg>
        <svg 
          viewBox="0 0 16 16" version="1.1" 
          xmlns="http://www.w3.org/2000/svg"
          class="dropdown__inner__error">
          <use 
            xmlns:xlink="http://www.w3.org/1999/xlink" 
            xlink:href="#icon-validation-alert" >
        </svg>
        <svg 
          viewBox="0 0 16 16" version="1.1" 
          xmlns="http://www.w3.org/2000/svg"
          class="dropdown__inner__error">
          <use 
            xmlns:xlink="http://www.w3.org/1999/xlink" 
            xlink:href="#icon-validation-alert" >
        </svg>
        <select class="dropdown__inner__select" id="dropdown-select-input">
          <option value="Soren Frederiksen">Soren Frederiksen</option>
          <option value="Richard Lama">Richard Lama</option>
          <option value="Reginal Sengkey">Reginal Sengkey</option>
        </select>
        <ul class="dropdown__inner__list" id="dropdown-list">
          <li value="Soren Frederiksen"
              class="dropdown__inner__list__item is--selected">
            Soren Frederiksen
            <svg 
              viewBox="0 0 10 7" version="1.1" 
              xmlns="http://www.w3.org/2000/svg"
              class="dropdown__inner__list__item__tick">
              <use 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                xlink:href="#icon-tick">
            </svg>
          </li>
          <li value="Richard Lama"
              class="dropdown__inner__list__item">
            Richard Lama
            <svg 
              viewBox="0 0 10 7" version="1.1" 
              xmlns="http://www.w3.org/2000/svg"
              class="dropdown__inner__list__item__tick">
              <use 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                xlink:href="#icon-tick">
            </svg>
            </svg>
          </li>
          <li value="Reginal Sengkey"
              class="dropdown__inner__list__item">
            Reginal Sengkey
            <svg 
              viewBox="0 0 10 7" version="1.1" 
              xmlns="http://www.w3.org/2000/svg"
              class="dropdown__inner__list__item__tick">
              <use 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                xlink:href="#icon-tick">
            </svg>
            </svg>
          </li>
          <li value="Mark Stehle"
              class="dropdown__inner__list__item">
            Mark Stehle
            <svg 
              viewBox="0 0 10 7" version="1.1" 
              xmlns="http://www.w3.org/2000/svg"
              class="dropdown__inner__list__item__tick">
              <use 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                xlink:href="#icon-tick">
            </svg>
            </svg>
          </li>
          <li value="Matthew Absalom-Wong"
              class="dropdown__inner__list__item">
            Matthew Absalom-Wong
            <svg 
              viewBox="0 0 10 7" version="1.1" 
              xmlns="http://www.w3.org/2000/svg"
              class="dropdown__inner__list__item__tick">
              <use 
                xmlns:xlink="http://www.w3.org/1999/xlink" 
                xlink:href="#icon-tick">
            </svg>
            </svg>
          </li>
        </ul>
      </div>
      <p class="dropdown__error">
        You did something wrong.
      </p>
    </div>
  ```
  In order to work fully (included the custom dropdown list), this mix-in also requires some 
  JavaScript. 

  Below is some bare-bones vanilla JavaScript that developers will be able to more eloquently 
  implement using whatever framework or library they're using. In principal, though,
  this is all you need.

  Example JavaScript:
  ```
  var dropdownValueDisplay = document.getElementById('dropdown-current-value');
  var dropdownSelectInput = document.getElementById('dropdown-select-input');
  var dropdownContainer = document.getElementById('dropdown-container');
  var dropdownListItems = dropdownContainer.getElementsByClassName('dropdown__inner__list__item');

  // When the user clicks the dropdown container, show it as selected
  dropdownContainer.addEventListener('click', function() {
    dropdownContainer.classList.toggle('is--selected');
  });

  // When the user click a dropdown list item, select it
  for (var i = 0; i < dropdownListItems.length; i += 1) {
    dropdownListItems[i].addEventListener('click', selectDropdownListItem);
  }

  function selectDropdownListItem(e) {

    var newDropdownValue = e.target.getAttribute('value');

    // Update dropdown value display and input
    dropdownValueDisplay.innerHTML = newDropdownValue;
    dropdownSelectInput.value = newDropdownValue;

    // Update dropdown list display (and calculate variables necessary to determine position of
    // tick)
    for (var i = 0; i < dropdownListItems.length; i += 1) {
      if (dropdownListItems[i] !== e.target) {
        dropdownListItems[i].classList.remove('is--selected');
      }
      else {
        indexOfTargetListItem = i;
        dropdownListItems[i].classList.add('is--selected');
      }
    }
  }
  ```
*/

// *---> Private mix-ins

/*
  Dropdown

  @param { Color } color - Colour of the input's text
  @param { String } border - Border property of input
  @param { Color } focus-color - Colour of the input's text when in focus state
  @param { Color } focus-carat-color - Colour of the input's carat when in focus state
  @param { Color } focus-border - Border property of input when in focus state
  @param { Number with unit } font-size - Size of the input's text
  @param { Color } background - Background colour of the input
  @parma { Color } list-item-color - Color of dropdown list items
  @parma { Color } selected-list-item-background - Background color signifying selected list item
  @param { Color } label-color - Color of the input's label
  @param { Number with unit } label-font-size - Size of the input's label's font
  @param { Boolean } use-custom-dropdown-list-on-mobile - Boolean indicating whether or not to use 
  the custom dropdown list on mobile, or whether to rely on a device's in-built dropdown
  @param { Boolean } can-be-invalid - Boolean indicating whether or not include invalid state styles
*/

@use "sass:math";

@mixin _dropdown(
  $color,
  $border,
  $focus-color,
  $focus-carat-color,
  $focus-border,
  $font-size,
  $background,
  $list-item-color,
  $selected-list-item-background,
  $label-color,
  $label-font-size,
  $list-max-height,
  $use-custom-dropdown-list-on-mobile,
  $can-be-invalid) {

  $new-font-size: to-unit(rem, $font-size);
  $fallback-font-size: to-unit(px, $font-size);

  $new-label-font-size: to-unit(rem, $label-font-size);
  $fallback-label-font-size: to-unit(px, $label-font-size);

  $proportion-of-default-size: to-num(math.div($new-font-size, 1rem)); 

  margin: 0 0 12px 0;

  // Label
  label {
    font-size: $fallback-label-font-size;
    font-size: $new-label-font-size;
    color: $label-color;
    @include fonts__sans-serif();
    font-weight: 400;

    padding-bottom: $fallback-label-font-size * 0.5;
    display: block;
  }

  // Dropdown input container
  .dropdown__inner {
    position: relative;

    background: $background;
    border: $border;
    transition: border-color 300ms ease;

    @include fonts__sans-serif;
    font-size: $fallback-font-size;
    font-size: $new-font-size;
    color: $color;

    padding: (10px * $proportion-of-default-size) (15px * $proportion-of-default-size);
    border-radius: 4px;
    width: 100%;

    cursor: pointer;

    span {
      display: block;
      line-height: normal;
      user-select: none;
    }
  }

  .dropdown__inner:hover,
  &.is--selected > .dropdown__inner {
    color: $focus-color;
    border: $focus-border;
  }

  // Dropdown carat
  .dropdown__inner__carat {
    color: $list-item-color;

    width: 10px * $proportion-of-default-size;
    height: 10px * $proportion-of-default-size;

    position: absolute;
    right: 15px * $proportion-of-default-size;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;

    transition: 
      color 300ms ease,
      transform 300ms cubic-bezier(.4,.2,.5,1.4);
  }

  .dropdown__inner:hover {
    .dropdown__inner__carat {
      color: $focus-carat-color;
    }
  }
  &.is--selected {
    .dropdown__inner__carat {
      color: $focus-carat-color;
      transform: translateY(-50%) rotate(180deg);
    }
  }

  // Dropdown select input
  .dropdown__inner__select {
    width: 100%;
    height: 100%;

    position: absolute;
    left: 0;
    top: 0;

    opacity: 0;

    cursor: pointer;
  }

  // Dropdown list
  .dropdown__inner__list {
    @include scrollbar-custom(
      10px,
      $selected-list-item-background,
      $focus-carat-color,
      5px,
      5px
    );

    position: absolute;
    left: 0;
    top: 101%;
    width: 100%;
    max-height: $list-max-height;
    z-index: 100;
    transform: translateY(50px * $proportion-of-default-size);

    background: $background;
    border: $focus-border;
    border-radius: 4px;

    opacity: 0; 
    display: none;
    pointer-events: none;  

    transition: 
      300ms transform cubic-bezier(.4,.2,.5,1.4),
      300ms opacity ease;
  }

  // Dropdown list item
  .dropdown__inner__list__item {
    padding: (12px * $proportion-of-default-size) (15px * $proportion-of-default-size);
    width: 100%;
    position: relative;

    color: $list-item-color;

    &:hover,
    &.is--selected {
      font-weight: 700;
      background: $selected-list-item-background;
    }

    &:first-child {
      border-radius: 4px 4px 0 0;
    }

    &:last-child {
      border-radius: 0 0 4px 4px;
    }
  }

  // Dropdown list item tick 
  .dropdown__inner__list__item__tick {
    position: absolute;
    top: 50%;
    right: 15px * $proportion-of-default-size;
    transform: translateY(-50%);

    width: 13px * $proportion-of-default-size;
    height: 13px * $proportion-of-default-size;

    display: none;

    color: $focus-carat-color;
  }

  .dropdown__inner__list__item.is--selected {
    .dropdown__inner__list__item__tick {
      display: block;
    }
  }

  // Invalid state
  @if ($can-be-invalid) {
    .dropdown__inner__error {
      position: absolute;
      top: 50%;
      right: -24px * $proportion-of-default-size;
      transform: translateY(-50%);

      width: 16px * $proportion-of-default-size;
      height: 16px * $proportion-of-default-size;

      opacity: 0;
      pointer-events: none;

      color: $color__red--medium;

      transition: opacity 350ms ease;
    }

    .dropdown__error {
      font-size: $fallback-font-size * 0.8125;
      font-size: $new-font-size * 0.8125;
      @include fonts__sans-serif();
      font-weight: 400;

      color: $color__red--medium;

      margin: 4px 0 0 0;
      display: none;
    }

    &.is--invalid {

      .dropdown__inner {
        border-color: $color__red--medium;
      }

      .dropdown__inner__error {
        opacity: 1;
      }

      .dropdown__error { 
        display: block;
      }
    } 
  }

  // Deactivated state
  &.is--deactivated {

    .dropdown__inner {
      background: $color__gray--light;
      color: $color__gray--dark;
      cursor: default;
      border-color: $color__gray--dark;

      &:hover {
        background: $color__gray--light;
        color: $color__gray--dark;
        border-color: $color__gray--dark;

        .dropdown__inner__carat {
          color: $color__gray--dark;
        }
      }
    }

    .dropdown__inner__list {
      transform: translateY(50px * $proportion-of-default-size);
      opacity: 0; 
      display: none;
      pointer-events: none;  
    }
    .dropdown__inner__carat {
      color: $color__gray--dark;
      transform: translateY(-50%) rotate(0deg);
    }
  }

  // If custom dropdown list is activated on mobile, include custom dropdown list styles for all
  // devices
  @if ($use-custom-dropdown-list-on-mobile) {
    @include _dropdown-custom-dropdown-list-styles();
  }
  // Otherwise, include them online for tablet and above
  @else {
    @include break-point("at least", "small") {
      @include _dropdown-custom-dropdown-list-styles();
    }
  }
}

/*
  Dropdown desktop custom dropdown list styles
*/

@mixin _dropdown-custom-dropdown-list-styles() {

  // Dropdown select input 
  .dropdown__inner__select {
    display: none;
    pointer-events: none;
  }

  // Dropdown list
  .dropdown__inner__list {
    display: block;
  }

  &.is--selected {
    .dropdown__inner__list {
      pointer-events: all;
      opacity: 1;
      transform: translateY(0px);
    }
  }
}

// *---> Public mix-ins

/*
  Dropdown

  @param { String } style - String denoting style of dropdown menu
  @param { Boolean } use-custom-dropdown-list-on-mobile - Boolean indicating whether or not to use 
  the custom dropdown list on mobile, or whether to rely on a device's in-built dropdown
  @param { Boolean } can-be-invalid - Boolean indicating whether or not include invalid state styles
*/

@mixin dropdown(
  $style: "standard",
  $use-custom-dropdown-list-on-mobile: false,
  $can-be-invalid: false) {

  $color__standard-list-item-gray: #595858;

  @if ($style == "standard") {

    @include _dropdown(
      $color__mine-shaft,
      1px solid $color__input-border-gray,
      $color__mine-shaft,
      $color__action,
      1px solid $color__action,
      1rem,
      #fff,
      $color__standard-list-item-gray,
      $color__athens-gray,
      $color__mine-shaft,
      0.9375rem,
      250px,
      $use-custom-dropdown-list-on-mobile,
      $can-be-invalid
    );
  }

  @if ($style == "standard--dark") {

    @include _dropdown(
      $color__mine-shaft,
      1px solid #fff,
      $color__mine-shaft,
      $color__action,
      1px solid $color__action,
      1rem,
      #fff,
      $color__standard-list-item-gray,
      $color__athens-gray,
      #fff,
      0.9375rem,
      250px,
      $use-custom-dropdown-list-on-mobile,
      $can-be-invalid
    );
  }
}


/*
  Custom dropdown

  @param { Number with unit } font-size - Size of input text (label is sized at 93.75% of this)
  @param { Color } color - Colour of the input's text
  @param { Color } background - Colour of input's background
  @param { Boolean } use-custom-dropdown-list-on-mobile - Boolean indicating whether or not to use 
  the custom dropdown list on mobile, or whether to rely on a device's in-built dropdown
  @param { Boolean } can-be-invalid - Boolean indicating whether or not include invalid state styles
  @param { Color } label-color - Colour of the input's label
  @param { Color } border-color - Colour of the input's border
  @param { Color } focus-border-color - Colour of the input's border in focus state
  @param { Color } list-item-color - Colour of the input's list item text
  @param { Number with unit } list-max-height - Maximum size of the dropdown list
*/

@mixin dropdown-custom(
  $font-size: 1rem,
  $color: $color__black--medium,
  $background: #fff,
  $use-custom-dropdown-list-on-mobile: false,
  $can-be-invalid: false,
  $label-color: $color__black--medium,
  $border-color: $color__input-border-gray, 
  $focus-border-color: $color__blue--medium-2,
  $list-item-color: #595858,
  $list-max-height: 250px) {

  $label-font-size: $font-size * 0.9375;

  @include _dropdown(
    $color,
    1px solid $border-color,
    $color,
    $focus-border-color,
    1px solid $focus-border-color,
    $font-size,
    $background,
    $list-item-color,
    darken($background, 3),
    $label-color,
    $label-font-size,
    $list-max-height,
    $use-custom-dropdown-list-on-mobile,
    $can-be-invalid
  );
}