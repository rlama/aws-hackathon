/* 
 * Generated by:    Amazon Q
 * Author:          Richard Lama
 * Last Updated:    December 22, 2024
 * Version:         1.0.0
 */


export default class StorageManager {
    static key = 'cb-game';

    // Get all data
    static getData() {
        try {
            const data = localStorage.getItem(this.key);
            return data ? JSON.parse(data) : {};
        } catch (error) {
            console.error('Error getting data:', error);
            return {};
        }
    }

    // Save data
    static saveData(data) {
        try {
            localStorage.setItem(this.key, JSON.stringify(data));
            return true;
        } catch (error) {
            console.error('Error saving data:', error);
            return false;
        }
    }

    // Update a specific property
    static updateProperty(property, value) {
        try {
            let data = this.getData();
            
            // If data is empty or property doesn't exist, initialize it
            if (!data || !data.hasOwnProperty(property)) {
                data = {
                    ...data,  // Keep any existing data
                    [property]: value
                };
                console.log(`Initializing ${property} with:`, value);
            } else {
                // Update existing property
                data[property] = value;
            }

            return this.saveData(data);
        } catch (error) {
            console.error('Error updating property:', error);
            return false;
        }
    }

    // Get a specific property
    static getProperty(property, defaultValue = null) {
        try {
            const data = this.getData();
            return data.hasOwnProperty(property) ? data[property] : defaultValue;
        } catch (error) {
            console.error('Error getting property:', error);
            return "";
        }
    }
}